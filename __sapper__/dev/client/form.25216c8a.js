import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, t as text, c as claim_element, b as children, g as claim_text, d as detach, k as insert, l as append, a as space, f as claim_space, h as attr, r as run_all, p as listen, n as noop, u as prevent_default } from './client.77055154.js';

/* src/routes/form.svelte generated by Svelte v3.22.3 */

function create_if_block(ctx) {
	let h1;
	let t;

	return {
		c() {
			h1 = element("h1");
			t = text("OH NO! AN ERRROR!");
		},
		l(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t = claim_text(h1_nodes, "OH NO! AN ERRROR!");
			h1_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t);
		},
		d(detaching) {
			if (detaching) detach(h1);
		}
	};
}

function create_fragment(ctx) {
	let form;
	let label0;
	let t0;
	let t1;
	let input0;
	let t2;
	let t3;
	let label1;
	let t4;
	let t5;
	let input1;
	let t6;
	let button;
	let t7;
	let dispose;
	let if_block = /*error_boolean*/ ctx[0] && create_if_block();

	return {
		c() {
			form = element("form");
			label0 = element("label");
			t0 = text("Email");
			t1 = space();
			input0 = element("input");
			t2 = space();
			if (if_block) if_block.c();
			t3 = space();
			label1 = element("label");
			t4 = text("Password");
			t5 = space();
			input1 = element("input");
			t6 = space();
			button = element("button");
			t7 = text("Create account");
			this.h();
		},
		l(nodes) {
			form = claim_element(nodes, "FORM", {});
			var form_nodes = children(form);
			label0 = claim_element(form_nodes, "LABEL", { for: true });
			var label0_nodes = children(label0);
			t0 = claim_text(label0_nodes, "Email");
			label0_nodes.forEach(detach);
			t1 = claim_space(form_nodes);
			input0 = claim_element(form_nodes, "INPUT", { required: true, type: true, id: true });
			t2 = claim_space(form_nodes);
			if (if_block) if_block.l(form_nodes);
			t3 = claim_space(form_nodes);
			label1 = claim_element(form_nodes, "LABEL", { for: true });
			var label1_nodes = children(label1);
			t4 = claim_text(label1_nodes, "Password");
			label1_nodes.forEach(detach);
			t5 = claim_space(form_nodes);
			input1 = claim_element(form_nodes, "INPUT", { required: true, type: true, id: true });
			t6 = claim_space(form_nodes);
			button = claim_element(form_nodes, "BUTTON", { type: true });
			var button_nodes = children(button);
			t7 = claim_text(button_nodes, "Create account");
			button_nodes.forEach(detach);
			form_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(label0, "for", "email");
			input0.required = true;
			attr(input0, "type", "email");
			attr(input0, "id", "email");
			attr(label1, "for", "password");
			input1.required = true;
			attr(input1, "type", "password");
			attr(input1, "id", "password");
			attr(button, "type", "submit");
		},
		m(target, anchor, remount) {
			insert(target, form, anchor);
			append(form, label0);
			append(label0, t0);
			append(form, t1);
			append(form, input0);
			append(form, t2);
			if (if_block) if_block.m(form, null);
			append(form, t3);
			append(form, label1);
			append(label1, t4);
			append(form, t5);
			append(form, input1);
			append(form, t6);
			append(form, button);
			append(button, t7);
			if (remount) run_all(dispose);

			dispose = [
				listen(form, "submit", prevent_default(handleSubmit)),
				listen(form, "invalid", /*validateMessageEmail*/ ctx[1]),
				listen(form, "changed", /*validateMessageEmail*/ ctx[1]),
				listen(form, "input", /*validateMessageEmail*/ ctx[1])
			];
		},
		p(ctx, [dirty]) {
			if (/*error_boolean*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block();
					if_block.c();
					if_block.m(form, t3);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(form);
			if (if_block) if_block.d();
			run_all(dispose);
		}
	};
}

async function handleSubmit(event) {
	console.log(event);
	console.log(event.target);
	console.log(event.target.email.value);
	console.log(event.target.password.value);
}

function instance($$self, $$props, $$invalidate) {
	let error_boolean = false;

	function validateMessageEmail(event) {
		let textbox = event.target;
		$$invalidate(0, error_boolean = false);

		if (textbox.value === "") {
			textbox.setCustomValidity("Required email address");
		} else if (textbox.validity.typeMismatch) {
			$$invalidate(0, error_boolean = true);
			textbox.setCustomValidity("please enter a valid email address");
		} else {
			textbox.setCustomValidity("");
		}

		return true;
	}

	return [error_boolean, validateMessageEmail];
}

class Form extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Form;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS4yNTIxNmM4YS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9mb3JtLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGxldCBlcnJvcl9ib29sZWFuID0gZmFsc2U7XG5cbiAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdChldmVudCkge1xuICAgICAgIGNvbnNvbGUubG9nKGV2ZW50KTtcbiAgICAgICBjb25zb2xlLmxvZyhldmVudC50YXJnZXQpO1xuICAgICAgIGNvbnNvbGUubG9nKGV2ZW50LnRhcmdldC5lbWFpbC52YWx1ZSk7XG4gICAgICAgY29uc29sZS5sb2coZXZlbnQudGFyZ2V0LnBhc3N3b3JkLnZhbHVlKTtcbiAgICB9XG5cbiAgIGZ1bmN0aW9uIHZhbGlkYXRlTWVzc2FnZUVtYWlsKGV2ZW50KSB7XG4gICAgICAgbGV0IHRleHRib3ggPSBldmVudC50YXJnZXQ7XG4gICAgICAgZXJyb3JfYm9vbGVhbiA9IGZhbHNlO1xuICAgICAgIGlmICh0ZXh0Ym94LnZhbHVlID09PSAnJykge1xuICAgICAgICAgICAgdGV4dGJveC5zZXRDdXN0b21WYWxpZGl0eSgnUmVxdWlyZWQgZW1haWwgYWRkcmVzcycpO1xuICAgICAgICB9IGVsc2UgaWYgKHRleHRib3gudmFsaWRpdHkudHlwZU1pc21hdGNoKXtcbiAgICAgICAgICAgIGVycm9yX2Jvb2xlYW4gPSB0cnVlO1xuICAgICAgICAgICAgdGV4dGJveC5zZXRDdXN0b21WYWxpZGl0eSgncGxlYXNlIGVudGVyIGEgdmFsaWQgZW1haWwgYWRkcmVzcycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICB0ZXh0Ym94LnNldEN1c3RvbVZhbGlkaXR5KCcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG48L3NjcmlwdD5cblxuPGZvcm1cbiAgICBvbjpzdWJtaXR8cHJldmVudERlZmF1bHQ9XCJ7aGFuZGxlU3VibWl0fVwiXG4gICAgb246aW52YWxpZD17dmFsaWRhdGVNZXNzYWdlRW1haWx9XG4gICAgb246Y2hhbmdlZD17dmFsaWRhdGVNZXNzYWdlRW1haWx9XG4gICAgb246aW5wdXQ9e3ZhbGlkYXRlTWVzc2FnZUVtYWlsfVxuPlxuICA8bGFiZWwgZm9yPVwiZW1haWxcIj5FbWFpbDwvbGFiZWw+XG4gIDxpbnB1dCByZXF1aXJlZCB0eXBlPVwiZW1haWxcIiBpZD1cImVtYWlsXCIgLz5cbiAgeyNpZiBlcnJvcl9ib29sZWFufVxuICAgIDxoMT4gT0ggTk8hIEFOIEVSUlJPUiE8L2gxPlxuICB7L2lmfVxuXG4gIDxsYWJlbCBmb3I9XCJwYXNzd29yZFwiPlBhc3N3b3JkPC9sYWJlbD5cbiAgPGlucHV0IHJlcXVpcmVkIHR5cGU9XCJwYXNzd29yZFwiIGlkPVwicGFzc3dvcmRcIiAvPlxuXG4gIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiPkNyZWF0ZSBhY2NvdW50PC9idXR0b24+XG48L2Zvcm0+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQ0FpQ08sR0FBYTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkNBUFcsWUFBWTtxREFDM0IsR0FBb0I7cURBQ3BCLEdBQW9CO21EQUN0QixHQUFvQjs7Ozt5QkFJM0IsR0FBYTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBOUJGLFlBQVksQ0FBQyxLQUFLO0NBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSztDQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNO0NBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSztDQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUs7Ozs7S0FOdEMsYUFBYSxHQUFHLEtBQUs7O1VBU2pCLG9CQUFvQixDQUFDLEtBQUs7TUFDM0IsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO2tCQUMxQixhQUFhLEdBQUcsS0FBSzs7TUFDakIsT0FBTyxDQUFDLEtBQUssS0FBSyxFQUFFO0dBQ25CLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyx3QkFBd0I7YUFDM0MsT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZO21CQUNwQyxhQUFhLEdBQUcsSUFBSTtHQUNwQixPQUFPLENBQUMsaUJBQWlCLENBQUMsb0NBQW9DOztHQUUvRCxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFBRTs7O1NBRXhCLElBQUk7Ozs7Ozs7Ozs7Ozs7OzsifQ==
