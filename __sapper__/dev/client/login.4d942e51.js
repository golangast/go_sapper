import { S as SvelteComponent, a as init, s as safe_not_equal, e as element, b as space, t as text, c as claim_element, h as claim_space, d as children, f as claim_text, g as detach, j as attr, k as insert, C as set_input_value, l as append, o as listen, A as set_data, y as noop, u as run_all } from './client.e22c960e.js';

/* src/routes/login.svelte generated by Svelte v3.23.2 */

function create_fragment(ctx) {
	let input0;
	let t0;
	let input1;
	let t1;
	let input2;
	let t2;
	let button;
	let t3;
	let t4;
	let p;
	let t5;
	let t6;
	let pre;
	let t7;
	let mounted;
	let dispose;

	return {
		c() {
			input0 = element("input");
			t0 = space();
			input1 = element("input");
			t1 = space();
			input2 = element("input");
			t2 = space();
			button = element("button");
			t3 = text("Post it.");
			t4 = space();
			p = element("p");
			t5 = text("Result:");
			t6 = space();
			pre = element("pre");
			t7 = text(/*result*/ ctx[3]);
			this.h();
		},
		l(nodes) {
			input0 = claim_element(nodes, "INPUT", {});
			t0 = claim_space(nodes);
			input1 = claim_element(nodes, "INPUT", {});
			t1 = claim_space(nodes);
			input2 = claim_element(nodes, "INPUT", {});
			t2 = claim_space(nodes);
			button = claim_element(nodes, "BUTTON", { type: true });
			var button_nodes = children(button);
			t3 = claim_text(button_nodes, "Post it.");
			button_nodes.forEach(detach);
			t4 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t5 = claim_text(p_nodes, "Result:");
			p_nodes.forEach(detach);
			t6 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", {});
			var pre_nodes = children(pre);
			t7 = claim_text(pre_nodes, /*result*/ ctx[3]);
			pre_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(button, "type", "button");
		},
		m(target, anchor) {
			insert(target, input0, anchor);
			set_input_value(input0, /*name*/ ctx[0]);
			insert(target, t0, anchor);
			insert(target, input1, anchor);
			set_input_value(input1, /*email*/ ctx[1]);
			insert(target, t1, anchor);
			insert(target, input2, anchor);
			set_input_value(input2, /*pass*/ ctx[2]);
			insert(target, t2, anchor);
			insert(target, button, anchor);
			append(button, t3);
			insert(target, t4, anchor);
			insert(target, p, anchor);
			append(p, t5);
			insert(target, t6, anchor);
			insert(target, pre, anchor);
			append(pre, t7);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[5]),
					listen(input1, "input", /*input1_input_handler*/ ctx[6]),
					listen(input2, "input", /*input2_input_handler*/ ctx[7]),
					listen(button, "click", /*doPost*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1 && input0.value !== /*name*/ ctx[0]) {
				set_input_value(input0, /*name*/ ctx[0]);
			}

			if (dirty & /*email*/ 2 && input1.value !== /*email*/ ctx[1]) {
				set_input_value(input1, /*email*/ ctx[1]);
			}

			if (dirty & /*pass*/ 4 && input2.value !== /*pass*/ ctx[2]) {
				set_input_value(input2, /*pass*/ ctx[2]);
			}

			if (dirty & /*result*/ 8) set_data(t7, /*result*/ ctx[3]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input0);
			if (detaching) detach(t0);
			if (detaching) detach(input1);
			if (detaching) detach(t1);
			if (detaching) detach(input2);
			if (detaching) detach(t2);
			if (detaching) detach(button);
			if (detaching) detach(t4);
			if (detaching) detach(p);
			if (detaching) detach(t6);
			if (detaching) detach(pre);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let name = "name";
	let email = "email";
	let pass = "pass";
	let result = null;

	async function doPost() {
		const res = await fetch("http://localhost:8080/post", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({ name, email, pass })
		}).then(res => res.json()).then(data => {
			console.log(data);
		}).catch(error => {
			console.error(error);
		});

		const json = await res.json();
		$$invalidate(3, result = JSON.stringify(json));
	}

	function input0_input_handler() {
		name = this.value;
		$$invalidate(0, name);
	}

	function input1_input_handler() {
		email = this.value;
		$$invalidate(1, email);
	}

	function input2_input_handler() {
		pass = this.value;
		$$invalidate(2, pass);
	}

	return [
		name,
		email,
		pass,
		result,
		doPost,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler
	];
}

class Login extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uNGQ5NDJlNTEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvbG9naW4uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGxldCBuYW1lID0gXCJuYW1lXCI7XG4gIGxldCBlbWFpbCA9IFwiZW1haWxcIjtcbiAgbGV0IHBhc3MgPSBcInBhc3NcIjtcbiAgbGV0IHJlc3VsdCA9IG51bGw7XG5cbiAgYXN5bmMgZnVuY3Rpb24gZG9Qb3N0KCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFwiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3Bvc3RcIiwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuYW1lLFxuICAgICAgICBlbWFpbCxcbiAgICAgICAgcGFzcyxcbiAgICAgIH0pLFxuICAgIH0pXG4gICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH0pO1xuXG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmVzdWx0ID0gSlNPTi5zdHJpbmdpZnkoanNvbik7XG4gIH1cbjwvc2NyaXB0PlxuXG48aW5wdXQgYmluZDp2YWx1ZT17bmFtZX0gLz5cbjxpbnB1dCBiaW5kOnZhbHVlPXtlbWFpbH0gLz5cbjxpbnB1dCBiaW5kOnZhbHVlPXtwYXNzfSAvPlxuPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb246Y2xpY2s9e2RvUG9zdH0+UG9zdCBpdC48L2J1dHRvbj5cbjxwPlJlc3VsdDo8L3A+XG48cHJlPntyZXN1bHR9PC9wcmU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFvQ00sR0FBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5Q0FBTixHQUFNOzs7Ozs7Ozs7b0NBTE8sR0FBSTs7O3FDQUNKLEdBQUs7OztvQ0FDTCxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7O3dDQUNTLEdBQU07Ozs7Ozs7dURBSG5CLEdBQUk7cUNBQUosR0FBSTs7O3lEQUNKLEdBQUs7c0NBQUwsR0FBSzs7O3VEQUNMLEdBQUk7cUNBQUosR0FBSTs7O3FEQUdqQixHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQW5DTixJQUFJLEdBQUcsTUFBTTtLQUNiLEtBQUssR0FBRyxPQUFPO0tBQ2YsSUFBSSxHQUFHLE1BQU07S0FDYixNQUFNLEdBQUcsSUFBSTs7Z0JBRUYsTUFBTTtRQUNiLEdBQUcsU0FBUyxLQUFLLENBQUMsNEJBQTRCO0dBQ2xELE1BQU0sRUFBRSxNQUFNO0dBQ2QsT0FBTyxJQUNMLGNBQWMsRUFBRSxrQkFBa0I7R0FFcEMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLEdBQ2xCLElBQUksRUFDSixLQUFLLEVBQ0wsSUFBSTtLQUdMLElBQUksQ0FBRSxHQUFHLElBQUssR0FBRyxDQUFDLElBQUksSUFDdEIsSUFBSSxDQUFFLElBQUk7R0FDVCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUk7S0FFakIsS0FBSyxDQUFFLEtBQUs7R0FDWCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUs7OztRQUdqQixJQUFJLFNBQVMsR0FBRyxDQUFDLElBQUk7a0JBQzNCLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUk7Ozs7RUFJYixJQUFJOzs7OztFQUNKLEtBQUs7Ozs7O0VBQ0wsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
