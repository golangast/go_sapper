import { i as identity, S as SvelteComponent, a as init, s as safe_not_equal, e as element, t as text, b as space, c as claim_element, d as children, f as claim_text, g as detach, h as claim_space, j as attr, k as insert, l as append, m as create_out_transition, n as set_style, o as listen, p as transition_in, q as transition_out, r as check_outros, u as run_all, v as add_render_callback, w as create_in_transition, x as group_outros } from './client.e22c960e.js';

function elasticOut(t) {
    return (Math.sin((-13.0 * (t + 1.0) * Math.PI) / 2) * Math.pow(2.0, -10.0 * t) + 1.0);
}

function fade(node, { delay = 0, duration = 400, easing = identity }) {
    const o = +getComputedStyle(node).opacity;
    return {
        delay,
        duration,
        easing,
        css: t => `opacity: ${t * o}`
    };
}

/* src/routes/index.svelte generated by Svelte v3.23.2 */

function create_if_block_1(ctx) {
	let div;
	let a0;
	let t0;
	let t1;
	let a1;
	let t2;
	let t3;
	let a2;
	let t4;
	let div_intro;
	let div_outro;
	let current;

	return {
		c() {
			div = element("div");
			a0 = element("a");
			t0 = text("Resources");
			t1 = space();
			a1 = element("a");
			t2 = text("Tutorials");
			t3 = space();
			a2 = element("a");
			t4 = text("Gitlab");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			a0 = claim_element(div_nodes, "A", { class: true, href: true, target: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "Resources");
			a0_nodes.forEach(detach);
			t1 = claim_space(div_nodes);
			a1 = claim_element(div_nodes, "A", { class: true, href: true, target: true });
			var a1_nodes = children(a1);
			t2 = claim_text(a1_nodes, "Tutorials");
			a1_nodes.forEach(detach);
			t3 = claim_space(div_nodes);
			a2 = claim_element(div_nodes, "A", { class: true, href: true, target: true });
			var a2_nodes = children(a2);
			t4 = claim_text(a2_nodes, "Gitlab");
			a2_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a0, "class", "grid-item svelte-il2tct");
			attr(a0, "href", "https://docs.google.com/document/d/1Zb9GCWPKeEJ4Dyn2TkT-O3wJ8AFc-IMxZzTugNCjr-8/edit?usp=sharing");
			attr(a0, "target", "_blank");
			attr(a1, "class", "grid-item svelte-il2tct");
			attr(a1, "href", "https://medium.com/jexia/master-the-world-of-golang-issue-9-2bdfec563c2e");
			attr(a1, "target", "_blank");
			attr(a2, "class", "grid-item svelte-il2tct");
			attr(a2, "href", "https://gitlab.com/zendrulat123");
			attr(a2, "target", "_blank");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, a0);
			append(a0, t0);
			append(div, t1);
			append(div, a1);
			append(a1, t2);
			append(div, t3);
			append(div, a2);
			append(a2, t4);
			current = true;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, /*spin*/ ctx[4], { duration: 8000 });
				div_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, fade, {});
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
		}
	};
}

// (137:2) {#if visible2}
function create_if_block(ctx) {
	let div;
	let a0;
	let t0;
	let t1;
	let a1;
	let t2;
	let t3;
	let a2;
	let t4;
	let t5;
	let a3;
	let t6;
	let t7;
	let a4;
	let t8;
	let div_intro;
	let div_outro;
	let current;

	return {
		c() {
			div = element("div");
			a0 = element("a");
			t0 = text("Ubuntu 20.04");
			t1 = space();
			a1 = element("a");
			t2 = text("VSCODE");
			t3 = space();
			a2 = element("a");
			t4 = text("SVELTEJS");
			t5 = space();
			a3 = element("a");
			t6 = text("Sapper");
			t7 = space();
			a4 = element("a");
			t8 = text("Go");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a0 = claim_element(div_nodes, "A", { class: true, href: true, target: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "Ubuntu 20.04");
			a0_nodes.forEach(detach);
			t1 = claim_space(div_nodes);
			a1 = claim_element(div_nodes, "A", { class: true, href: true, target: true });
			var a1_nodes = children(a1);
			t2 = claim_text(a1_nodes, "VSCODE");
			a1_nodes.forEach(detach);
			t3 = claim_space(div_nodes);
			a2 = claim_element(div_nodes, "A", { class: true, href: true, target: true });
			var a2_nodes = children(a2);
			t4 = claim_text(a2_nodes, "SVELTEJS");
			a2_nodes.forEach(detach);
			t5 = claim_space(div_nodes);
			a3 = claim_element(div_nodes, "A", { class: true, href: true, target: true });
			var a3_nodes = children(a3);
			t6 = claim_text(a3_nodes, "Sapper");
			a3_nodes.forEach(detach);
			t7 = claim_space(div_nodes);
			a4 = claim_element(div_nodes, "A", { class: true, href: true, target: true });
			var a4_nodes = children(a4);
			t8 = claim_text(a4_nodes, "Go");
			a4_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a0, "class", "grid-item svelte-il2tct");
			attr(a0, "href", "https://ubuntu.com/");
			attr(a0, "target", "_blank");
			attr(a1, "class", "grid-item svelte-il2tct");
			attr(a1, "href", "https://code.visualstudio.com/");
			attr(a1, "target", "_blank");
			attr(a2, "class", "grid-item svelte-il2tct");
			attr(a2, "href", "https://svelte.dev/");
			attr(a2, "target", "_blank");
			attr(a3, "class", "grid-item svelte-il2tct");
			attr(a3, "href", "https://sapper.svelte.dev/docs/");
			attr(a3, "target", "_blank");
			attr(a4, "class", "grid-item svelte-il2tct");
			attr(a4, "href", "https://golang.org/");
			attr(a4, "target", "_blank");
			attr(div, "class", "grid svelte-il2tct");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, a0);
			append(a0, t0);
			append(div, t1);
			append(div, a1);
			append(a1, t2);
			append(div, t3);
			append(div, a2);
			append(a2, t4);
			append(div, t5);
			append(div, a3);
			append(a3, t6);
			append(div, t7);
			append(div, a4);
			append(a4, t8);
			current = true;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, /*spin*/ ctx[4], { duration: 8000 });
				div_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, fade, {});
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let div3;
	let div2;
	let t1;
	let t2;
	let br0;
	let t3;
	let t4;
	let div5;
	let div4;
	let t5;
	let t6;
	let br1;
	let t7;
	let t8;
	let p;
	let t9;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*visible*/ ctx[0] && create_if_block_1(ctx);
	let if_block1 = /*visible2*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div3 = element("div");
			div2 = element("div");
			t1 = text("Things Ive created.");
			t2 = space();
			br0 = element("br");
			t3 = space();
			if (if_block0) if_block0.c();
			t4 = space();
			div5 = element("div");
			div4 = element("div");
			t5 = text("Tech that I use.");
			t6 = space();
			br1 = element("br");
			t7 = space();
			if (if_block1) if_block1.c();
			t8 = space();
			p = element("p");
			t9 = text("I've been loving Go + Sveltejs incrediably a lot. Not much is simplier. I\n  decided my next plan is to write blogs about what I am learning and thoughts\n  about tech. There is a lot that I love to dig into and a lot that I try to\n  learn.");
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			img = claim_element(div0_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				class: true
			});

			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t0 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true, style: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t1 = claim_text(div2_nodes, "Things Ive created.");
			div2_nodes.forEach(detach);
			t2 = claim_space(div3_nodes);
			br0 = claim_element(div3_nodes, "BR", {});
			t3 = claim_space(div3_nodes);
			if (if_block0) if_block0.l(div3_nodes);
			div3_nodes.forEach(detach);
			t4 = claim_space(nodes);
			div5 = claim_element(nodes, "DIV", { class: true, style: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t5 = claim_text(div4_nodes, "Tech that I use.");
			div4_nodes.forEach(detach);
			t6 = claim_space(div5_nodes);
			br1 = claim_element(div5_nodes, "BR", {});
			t7 = claim_space(div5_nodes);
			if (if_block1) if_block1.l(div5_nodes);
			div5_nodes.forEach(detach);
			t8 = claim_space(nodes);
			p = claim_element(nodes, "P", { style: true, class: true });
			var p_nodes = children(p);
			t9 = claim_text(p_nodes, "I've been loving Go + Sveltejs incrediably a lot. Not much is simplier. I\n  decided my next plan is to write blogs about what I am learning and thoughts\n  about tech. There is a lot that I love to dig into and a lot that I try to\n  learn.");
			p_nodes.forEach(detach);
			this.h();
		},
		h() {
			if (img.src !== (img_src_value = me)) attr(img, "src", img_src_value);
			attr(img, "alt", "");
			attr(img, "width", "30%");
			attr(img, "class", "svelte-il2tct");
			attr(div0, "class", "hitem h-mid svelte-il2tct");
			attr(div1, "class", "header svelte-il2tct");
			attr(div2, "class", "button svelte-il2tct");
			attr(div3, "class", "item gridtitle svelte-il2tct");
			set_style(div3, "font-weight", "bold");
			attr(div4, "class", "button svelte-il2tct");
			attr(div5, "class", "item gridtitle svelte-il2tct");
			set_style(div5, "font-weight", "bold");
			set_style(p, "width", "100%");
			set_style(p, "text-align", "center");
			attr(p, "class", "svelte-il2tct");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, img);
			insert(target, t0, anchor);
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, t1);
			append(div3, t2);
			append(div3, br0);
			append(div3, t3);
			if (if_block0) if_block0.m(div3, null);
			insert(target, t4, anchor);
			insert(target, div5, anchor);
			append(div5, div4);
			append(div4, t5);
			append(div5, t6);
			append(div5, br1);
			append(div5, t7);
			if (if_block1) if_block1.m(div5, null);
			insert(target, t8, anchor);
			insert(target, p, anchor);
			append(p, t9);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div3, "click", /*check*/ ctx[2]),
					listen(div5, "click", /*check2*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*visible*/ ctx[0]) {
				if (if_block0) {
					if (dirty & /*visible*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div3, null);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*visible2*/ ctx[1]) {
				if (if_block1) {
					if (dirty & /*visible2*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div5, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching) detach(t0);
			if (detaching) detach(div3);
			if (if_block0) if_block0.d();
			if (detaching) detach(t4);
			if (detaching) detach(div5);
			if (if_block1) if_block1.d();
			if (detaching) detach(t8);
			if (detaching) detach(p);
			mounted = false;
			run_all(dispose);
		}
	};
}

let me = "me.png";

function instance($$self, $$props, $$invalidate) {
	let visible;
	let visible2;

	function check() {
		console.log(visible);

		if (visible == true) {
			$$invalidate(0, visible = false);
		} else {
			$$invalidate(0, visible = true);
		}
	}

	function check2() {
		console.log(visible2);

		if (visible2 == true) {
			$$invalidate(1, visible2 = false);
		} else {
			$$invalidate(1, visible2 = true);
		}
	}

	function spin(node, { duration }) {
		return {
			duration,
			css: t => {
				const eased = elasticOut(t);

				return `
					transform: scale(${eased}) rotate(${eased * 1080}deg);
					color: hsl(
						${~~(t * 360)},
						${Math.min(100, 1000 - 1000 * t)}%,
						${Math.min(50, 500 - 500 * t)}%
					);`;
			}
		};
	}

	return [visible, visible2, check, check2, spin];
}

class Routes extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
