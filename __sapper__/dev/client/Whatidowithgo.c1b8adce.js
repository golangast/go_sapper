import { S as SvelteComponent, a as init, s as safe_not_equal, e as element, t as text, b as space, c as claim_element, d as children, f as claim_text, g as detach, h as claim_space, n as set_style, j as attr, k as insert, l as append, y as noop } from './client.91f96ea9.js';

/* src/routes/bloggy/Whatidowithgo.svelte generated by Svelte v3.23.2 */

function create_fragment(ctx) {
	let h3;
	let t0;
	let t1;
	let br;
	let t2;
	let div;
	let t3;
	let p;
	let t4;
	let a;
	let t5;
	let t6;
	let span0;
	let t7;
	let t8;
	let t9;
	let pre;
	let code;

	let t10_value = `http.HandleFunc("/hello", helloHandler)
	log.Fatal(http.ListenAndServe(":8080", nil))
` + "";

	let t10;
	let t11;
	let span1;
	let t12;
	let t13;

	return {
		c() {
			h3 = element("h3");
			t0 = text("What do I do with Go?.");
			t1 = space();
			br = element("br");
			t2 = space();
			div = element("div");
			t3 = text("What do I do with Go?.\n");
			p = element("p");
			t4 = text("I usually build servers.  I enjoy the nice API that it has.\nA good example is the ");
			a = element("a");
			t5 = text("http package");
			t6 = text("\nThe ");
			span0 = element("span");
			t7 = text("ListenAndServe ");
			t8 = text("method is really where the server begins.");
			t9 = space();
			pre = element("pre");
			code = element("code");
			t10 = text(t10_value);
			t11 = text("\nThe ");
			span1 = element("span");
			t12 = text("HandleFunc");
			t13 = text(" is how routing is setup.\nI think a lot of people dont realize how easy this is to read.\nThey just presume this is how go does it and dont stop to \nrealize how simple this is.");
			this.h();
		},
		l(nodes) {
			h3 = claim_element(nodes, "H3", { style: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "What do I do with Go?.");
			h3_nodes.forEach(detach);
			t1 = claim_space(nodes);
			br = claim_element(nodes, "BR", {});
			t2 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t3 = claim_text(div_nodes, "What do I do with Go?.\n");
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t4 = claim_text(p_nodes, "I usually build servers.  I enjoy the nice API that it has.\nA good example is the ");
			a = claim_element(p_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t5 = claim_text(a_nodes, "http package");
			a_nodes.forEach(detach);
			t6 = claim_text(p_nodes, "\nThe ");
			span0 = claim_element(p_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t7 = claim_text(span0_nodes, "ListenAndServe ");
			span0_nodes.forEach(detach);
			t8 = claim_text(p_nodes, "method is really where the server begins.");
			p_nodes.forEach(detach);
			t9 = claim_space(div_nodes);
			pre = claim_element(div_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			code = claim_element(pre_nodes, "CODE", { class: true });
			var code_nodes = children(code);
			t10 = claim_text(code_nodes, t10_value);
			code_nodes.forEach(detach);
			pre_nodes.forEach(detach);
			t11 = claim_text(div_nodes, "\nThe ");
			span1 = claim_element(div_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t12 = claim_text(span1_nodes, "HandleFunc");
			span1_nodes.forEach(detach);
			t13 = claim_text(div_nodes, " is how routing is setup.\nI think a lot of people dont realize how easy this is to read.\nThey just presume this is how go does it and dont stop to \nrealize how simple this is.");
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_style(h3, "text-decoration", "underline");
			attr(a, "href", "https://golang.org/pkg/net/http/");
			attr(a, "class", "svelte-1rzkz8u");
			attr(span0, "class", "svelte-1rzkz8u");
			attr(code, "class", "svelte-1rzkz8u");
			attr(pre, "class", "svelte-1rzkz8u");
			attr(span1, "class", "svelte-1rzkz8u");
			attr(div, "class", "body svelte-1rzkz8u");
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			append(h3, t0);
			insert(target, t1, anchor);
			insert(target, br, anchor);
			insert(target, t2, anchor);
			insert(target, div, anchor);
			append(div, t3);
			append(div, p);
			append(p, t4);
			append(p, a);
			append(a, t5);
			append(p, t6);
			append(p, span0);
			append(span0, t7);
			append(p, t8);
			append(div, t9);
			append(div, pre);
			append(pre, code);
			append(code, t10);
			append(div, t11);
			append(div, span1);
			append(span1, t12);
			append(div, t13);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			if (detaching) detach(br);
			if (detaching) detach(t2);
			if (detaching) detach(div);
		}
	};
}

class Whatidowithgo extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Whatidowithgo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2hhdGlkb3dpdGhnby5jMWI4YWRjZS5qcyIsInNvdXJjZXMiOltdLCJzb3VyY2VzQ29udGVudCI6W10sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
